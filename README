//Teknologi yang Digunakan
Node.js + Apollo Server
MySQL Database 
GraphQL Playground / Postman untuk testing API

//Install dependencies
npm init -y
npm install express apollo-server-express graphql mysql2

//Struktur Database
pelanggan
barang
kategori
penjualan
detail_Penjualan

//Collection API
https://doc.echoapi.com/docs/detail/450b8f8b6c02000?target_id=105941cc35d058&locale=en

Berhubung cuma terbawa 1 setiap folder nya untuk testing API nya
saya lampirkan disini


	
	Semua Pelanggan
	http://localhost:4000/graphql
	{
		"query": "query { semuaPelanggan { id nama email telepon } }"
	}
	Pelanggan by id
	http://localhost:4000/graphql
	{
	"query": "query { pelanggan(id: 11) { id nama email telepon } }"
	}
	Pelanggan update
	http://localhost:4000/graphql
	{
	"query": "mutation { ubahPelanggan(id: 11, nama: \"raos\", email: \"raos@mail.com\", telepon: \"08987654321\") }"
	}
	Pelanggan hapus
	http://localhost:4000/graphql
	{
	"query": "mutation { hapusPelanggan(id: 11) }"
	}

	Semua barang
	http://localhost:4000/graphql
	{
	"query": "query { semuaBarang { id nama harga stok kategori_id } }"
	}
	barang by id
	http://localhost:4000/graphql
	{
	"query": "query { barang(id: 10) { id nama harga stok kategori_id } }"
	}
	barang update
	http://localhost:4000/graphql
	{
	"query": "mutation { ubahBarang(id: 10, nama: \"Krayon\", harga: 10000, stok: 20, kategori_id: 7) { id nama harga stok kategori_id } }"
	}
	barang hapus
	http://localhost:4000/graphql
	{
	"query": "mutation { hapusBarang(id: 10) }"
	}
	
	
	Semua kategori
	http://localhost:4000/graphql
	{
	"query": "query { semuaKategori { id nama } }"
	}
	kategori by id
	http://localhost:4000/graphql
	{
	"query": "query { kategori(id: 13) { id nama } }"
	}
	kategori update
	http://localhost:4000/graphql
	{
	"query": "mutation { ubahKategori(id: 13, nama: \"Makanan Dewasa\") { id nama } }"
	}
	hapus kategori
	http://localhost:4000/graphql
	{
	"query": "mutation { hapusKategori(id: 13) }"
	}

	Semua Penjualan
	http://localhost:4000/graphql
	{
	"query": "query { semuaPenjualan { id tanggal pelanggan_id total } }"
	}
	penjualan by id
	http://localhost:4000/graphql
	{
	"query": "query { penjualan(id: 6) { id tanggal pelanggan_id total } }"
	}
	update penjualan
	http://localhost:4000/graphql
	{
	"query": "mutation { ubahPenjualan(id: 6, tanggal: \"2025-04-27\", pelanggan_id: 8, total: 300000) { id tanggal pelanggan_id total } }"
	}
	hapus penjualan
	http://localhost:4000/graphql
	{
	"query": "mutation { hapusPenjualan(id: 6) }"
	}

	Semua Detail Penjualan
	http://localhost:4000/graphql
	{
	"query": "query { semuaDetailPenjualan { id penjualan_id barang_id jumlah harga_satuan } }"
	}
	detail penjualan by id
	http://localhost:4000/graphql
	{
	"query": "query { detailPenjualan(id: 6) { id penjualan_id barang_id jumlah harga_satuan } }"
	}
	update penjualan
	http://localhost:4000/graphql
	{
	"query": "mutation { ubahDetailPenjualan(id: 6, penjualan_id: 5, barang_id: 2, jumlah: 10, harga_satuan: 50000) { id penjualan_id barang_id jumlah harga_satuan } }"
	}
	hapus penjualan
	http://localhost:4000/graphql
	{
	"query": "mutation { hapusDetailPenjualan(id: 6) }"
	}


//Import Database
Jalankan file SQL berikut:
data/pelanggan.sql
data/barang.sql
data/kategori.sql
data/penjualan.sql
data/detailpenjualan.sql

//Cara import:
Masuk ke MySQL CLI:

mysql -u root -p
Setelah masuk ke MySQL prompt:

SOURCE path/ke/file.sql;

//Endpoint API (GraphQL Schema)
Semua operasi dilakukan di satu endpoint:

http://localhost:4000/
Menggunakan query dan mutation GraphQL.

//Kategori
Query semua kategori:

query { semuaKategori { id nama } }
Mutation tambah kategori:

mutation { tambahKategori(nama: "Elektronik") { id nama } }

//Barang
Query semua barang:

query { semuaBarang { id nama harga stok kategori_id } }

//Pelanggan
Query semua pelanggan:

query { semuaPelanggan { id nama email telepon } }
Mutation tambah pelanggan:

mutation { tambahPelanggan(nama: "Fahmi", email: "fahmi@mail.com", telepon: "08987654324") { id nama email telepon } }

//Penjualan
Mutation tambah penjualan:

mutation { tambahPenjualan(pelanggan_id: 1, tanggal: "2025-04-26", total: 100000) { id tanggal pelanggan_id total } }

//Detail Penjualan
Mutation tambah detail penjualan:

mutation { tambahDetailPenjualan(penjualan_id: 1, barang_id: 1, jumlah: 2, harga_satuan: 50000) { id penjualan_id barang_id jumlah harga_satuan } }

//Testing API
Jalankan server lokal (node server.js).

Buka Echo API / GraphQL Playground di browser http://localhost:4000/

Coba query dan mutation sesuai kebutuhan.